name: Contracts Coverage

on:
  pull_request:
    paths:
      - 'protocols/evm/**'
  push:
    branches:
      - main
    paths:
      - 'protocols/evm/**'

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Run coverage
        working-directory: protocols/evm
        env:
          FOUNDRY_DISABLE_NIGHTLY_WARNING: '1'
        run: |
          forge --version
          forge cleanup || true
          forge coverage --ir-minimum --report lcov

      - name: Enforce contracts coverage thresholds
        working-directory: protocols/evm
        run: |
          set -euo pipefail
          test -f lcov.info
          awk -v min_lines=80 -v min_branches=60 '
            BEGIN{FS=":"}
            /^SF:/ {file=$2; in_contract=(index(file,"contracts/")==1);}
            in_contract && /^LH:/ {lh+=$2}
            in_contract && /^LF:/ {lf+=$2}
            in_contract && /^BRH:/ {brh+=$2}
            in_contract && /^BRF:/ {brf+=$2}
            END{
              if (lf==0){print "No contract lines found in coverage"; exit 1}
              lines=100*lh/lf; branches=(brf?100*brh/brf:100)
              printf("Contracts/* coverage -> lines: %.2f%% (%d/%d), branches: %.2f%% (%d/%d)\n", lines, lh, lf, branches, brh, brf)
              if (lines+1e-9 < min_lines) {printf("Lines coverage below threshold %.2f%%\n", min_lines); exit 2}
              if (branches+1e-9 < min_branches) {printf("Branch coverage below threshold %.2f%%\n", min_branches); exit 3}
            }
          ' lcov.info

      - name: Upload lcov
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evm-lcov
          path: protocols/evm/lcov.info
